# -*- coding: utf-8 -*-
# 作者:             inspurer(月小水长)
# 创建时间:          2020/11/1 19:43
# 运行环境           Python3.6+
# github            https://github.com/inspurer
# qq邮箱            2391527690@qq.com
# 微信公众号         月小水长(ID: inspurer)
# 文件备注信息       todo

# Get the number of posts for each user
import csv
import os
import random
import re
import sys
import traceback
from collections import OrderedDict
from datetime import datetime, timedelta
from time import sleep
import pandas as pd
import logging
import requests
import pandas as pd

requests.packages.urllib3.disable_warnings()
from lxml import etree
import json

Cookie='SCF=An_5egbOgXsnRftp1CDXNGWQRV-B6hMi4r5wiIV550he0lj0scU6PHFFdmVNYPXFQhOM6VmCOAgFcm3EwtVfeVI.; SSOLoginState=1697424407; SUB=_2A25IKNRHDeRhGeFL6VUU9CrJyzyIHXVrRGmPrDV6PUJbkdANLUfXkW1NQlagM5KJWhqmcpeoEsEu19_DYnj7dCNG; _T_WM=e9f0b460365e063043f9e4200fcf45c6'
User_Agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36'
class WeiboUserScrapy():
    IMG_LINK_SEP = ' '
    IMG_SAVE_ROOT = 'img'

    def __init__(self, user_id,index, filter=0, download_img=False):
        global headers
        self.headers = {
            'Cookie': Cookie,
            'User_Agent': User_Agent
        }

        if filter != 0 and filter != 1:
            sys.exit('filter值应为0或1,请重新输入')

        self.user_id = str(user_id)  # 用户id,即需要我们输入的数字,如昵称为"Dear-迪丽热巴"的id为1669879400
        self.filter = filter  # 取值范围为0、1,程序默认值为0,代表要爬取用户的全部微博,1代表只爬取用户的原创微博
        self.download_img = download_img  # 微博抓取結束后是否下载微博图片
        self.nickname = ''  # 用户昵称,如“Dear-迪丽热巴”
        self.weibo_num = 0  # 用户全部微博数
        self.got_num = 0  # 爬取到的微博数
        self.following = 0  # 用户关注数
        self.followers = 0  # 用户粉丝数
        self.weibo = []  # 存储爬取到的所有微博信息

        self.has_weibo = True
        self.total_page_num = None
        self.index = index

        if not os.path.exists('user'):
            os.mkdir('user')
        if not os.path.exists(self.IMG_SAVE_ROOT):
            os.mkdir(self.IMG_SAVE_ROOT)
        if self.download_img:
            self.img_save_folder = os.path.join(self.IMG_SAVE_ROOT, self.user_id)
            if not os.path.exists(self.img_save_folder):
                os.mkdir(self.img_save_folder)
        self.run()

    def deal_html(self, url):
        """处理html"""
        try:
            html = requests.get(url, headers=self.headers, verify=False).content
            selector = etree.HTML(html)
            return selector
        except Exception as e:
            print('Error: ', e)
            traceback.print_exc()

    def deal_garbled(self, info):
        """处理乱码"""
        try:
            info = (info.xpath('string(.)').replace(u'\u200b', '').encode(
                sys.stdout.encoding, 'ignore').decode(sys.stdout.encoding))
            return info
        except Exception as e:
            print('Error: ', e)
            traceback.print_exc()

    def get_nickname(self):
        """获取用户昵称"""
        try:
            url = 'https://weibo.cn/{}/info'.format(self.user_id)
            selector = self.deal_html(url)
            nickname = selector.xpath('//title/text()')[0]
            self.nickname = nickname[:-3]
            if self.nickname == '登录 - 新' or self.nickname == '新浪':
                sys.exit('cookie错误或已过期')
            print('用户昵称: ' + self.nickname)
        except Exception as e:
            print('Error: ', e)
            traceback.print_exc()

    def get_user_info(self, selector):
        """获取用户昵称、微博数、关注数、粉丝数"""
        try:
            self.get_nickname()  # 获取用户昵称
            user_info = selector.xpath("//div[@class='tip2']/*/text()")

            self.weibo_num = (user_info[0][3:-1])
            print('微博数: ' + str(self.weibo_num))

            self.following = (user_info[1][3:-1])
            print('关注数: ' + str(self.following))

            self.followers = (user_info[2][3:-1])
            print('粉丝数: ' + str(self.followers))
            print('*' * 100)
        except Exception as e:
            print('Error: ', e)
            traceback.print_exc()

    def get_page_num(self, selector):
        """获取微博总页数"""
        try:
            if selector.xpath("//input[@name='mp']") == []:
                page_num = 1
                logging.warning(self.user_id+ ' Index ' + self.index + ' : '+ str(page_num)+' Pages')
            else:
                page_num = (int)(
                    selector.xpath("//input[@name='mp']")[0].attrib['value'])
                logging.warning(self.user_id+ ': '+ str(page_num)+' Pages')

            # if the scraper cannot get a page, that means it is blocked
            # usually, even users without posts still have one page
            if page_num is None:
                sys.exit('Blocked!')
            return page_num
        except Exception as e:
            print('Error: ', e)
            traceback.print_exc()
            sys.exit('Blocked!')

    def get_weibo_info(self):
        """获取微博信息"""
        try:
            url = f'https://weibo.cn/{self.user_id}/profile'
            selector = self.deal_html(url)
            self.get_user_info(selector)  # 获取用户昵称、微博数、关注数、粉丝数
            page_num = self.get_page_num(selector)  # 获取微博总页数
            self.total_page_num = page_num
            logging.warning(self.user_id + ': ' + str(page_num) )

            # check whether 她还没发过微博.
            if len(selector.xpath('/html/body/div[7]/text()')) != 0:
                if selector.xpath('/html/body/div[7]/text()')[0] == '她还没发过微博.' or selector.xpath('/html/body/div[7]/text()')[0] == '他还没发过微博.':
                    self.has_weibo = False
            else:
                self.has_weibo = True

        except Exception as e:
            print('Error: ', e)
            traceback.print_exc()

    def run(self):
        """运行爬虫 """
        try:
            self.get_weibo_info()

            # each obs
            df = pd.DataFrame({'user_id': [self.user_id],
                               'nickname': [self.nickname],
                               'total_page_num': [self.total_page_num],
                               'weibo_num':[self.weibo_num],
                               'has_weibo':[self.has_weibo]})
            # append and write to csv
            df.to_csv(filename,mode='a',index=False)


        except Exception as e:
            print('Error: ', e)
            print(traceback.format_exc())


if __name__ == '__main__':
    # 注意关闭 vpn，注意配置代码第 29 行处的 cookie
    # 2023.2.12 更新
    # 1、解决无法抓取 cookie 对应账号微博的问题
    # 2、解决微博抓取不全的问题，解决微博全文无法获取的问题（有待多次验证）
    # 3、可选下载所有图片（包括微博相册和转发微博里面的图片），参数为 download_img，默认为 False 不下载

    # open an empty / existing csv file
    filename = "user_post_num.csv"

    # header
    header = ['user_id','user_name','page_num','post_num','has_weibo']
    id_list = [2433827884, 1895567845, 1669763744, 5967503625, 1751606144, 2083438721, 1868725482, 1006421732, 1571497285, 1704116960, 1262819273, 7064708862, 1236837097, 3579616231, 1822785942, 1235138693, 1223179064, 2146965345, 1231688837, 6203188939, 1729859377, 1821135665, 2117726305, 1876156855, 1235481371, 1271359943, 2409068545, 2150758415, 1244856617, 1233614375, 1287604042, 1731864915, 1268252377, 1709572805, 2705589884, 1497176560, 5627362571, 1672587573, 1751125675, 2085966565, 1253848505, 2644575251, 5920356880, 1731972042, 7286955267, 6057973808, 1806062307, 5318584155, 2099804201, 1825329153, 1667502093, 1195354434, 1313454973, 1210558765, 1862974331, 1657693052, 1462356705, 1732927460, 2696749592, 1511705710, 6171388940, 2268869983, 1864388983, 6179279336, 1686997830, 1261141474, 1252032243, 1179013242, 1847672711, 1717175282, 3820754851, 2155202415, 1633079705, 1739266037, 1402602034, 3030365523, 1801055875, 1296241304, 1714193955, 1066317210, 1239368103, 6288254740, 3968741640, 1817472001, 1440344522, 2565158051, 1337970873, 3285031871, 1391954182, 1213328234, 1097080752, 6055458953, 5977036090, 2282421827, 1250877663, 3175707612, 1198073405, 2795857600, 1076907402, 1566936885, 5541182601, 2623007997, 2583858490, 2287349412, 2761630725, 1199275700, 2033248174, 1712782607, 1223537940, 3739204194, 1886290635, 1246147933, 1229906331, 1224672814, 1498522714, 1643200985, 5887697249, 1735695412, 3100185195, 1735125594, 1263658704, 2449152482, 5211643249, 1231821870, 1691761292, 3616258995, 6823546584, 2979392192, 1967952367, 1743513605, 1469187111, 1496838293, 1156966391, 1198408797, 6047467945, 1745811937, 1711704715, 1321880115, 2688201053, 1580993472, 1580971924, 1802626467, 7155113315, 1763969373, 1686751151, 2449552120, 1404927945, 1765335300, 1796258175, 1733078595, 3185250997, 1971076403, 2092944627, 1307243944, 1698077481, 1642586513, 1927706047, 1767819164, 1371731565, 1906339011, 1357579865, 1745766100, 1408932587, 1650246564, 3916424386, 1748764503, 1196900641, 1791715730, 1298062167, 1238726334, 1774124194, 2267520074, 3370070480, 1613258127, 2128209774, 2620811727, 1195230310, 2183487935, 2104645281, 2424084591, 3600625653, 1266404711, 5672291931, 1801988971, 1706372681, 1782432341, 1292815744, 2119367023, 1243139777, 2707527833, 2257401393, 1218494871, 1194892683, 1951031735, 1713696033, 2344543981, 1750638262, 1225563944, 1883003324, 1752502537, 6988788731, 1214835457, 1626443785, 1840441844, 5887863238, 3668829440, 1035674473, 1700486331, 1567261593, 1276314124, 3319236353, 1344386244, 3597709105, 2700877354, 1300419694, 1722803755, 1807776872, 1752467960, 7275646478, 1703296145, 2868803181, 1079220264, 1511484000, 3944068535, 2627008233, 5693482483, 1771140437, 1232114604, 1065105440, 1907616172, 1197354837, 1322373644, 2342329387, 1877701971, 1249629725, 1689023367, 2600926867, 1882307872, 3675865547, 1721425872, 6795935450, 6741964788, 1826643727, 5023069053, 7339969127, 1654807054, 1197354837, 1779875541, 1824553760, 6296303400, 1242418703, 1378915695, 6019404696, 2493507623, 1792857820, 1319015503, 1373539132, 2431095307, 3908122917, 1680313495, 1735833683, 3932588380, 1840141932, 1054007001, 5891319276, 2451544942, 1865277117, 2176141495, 1650305567, 1679517897, 5688774559, 3219503800, 2746296141, 2661504823, 1476424833, 2112642651, 1197934181, 1697045860, 1907767253, 1797054534, 1222732820, 1871944365, 1457699772, 1811363633, 2153928381, 2502471581, 1212394350, 1497164973, 1264674527, 1213536224, 2684259633, 1641519890, 1808764472, 1730338264, 1246756713, 2157329842, 1191044977, 1706948687, 1735957450, 1757744065, 1863792930, 1323061061, 2655245350, 1678682530, 1396454421, 2179021091, 2501511785, 2285334795, 1739475907, 1258824907, 1681213010, 1724196104, 2113270200, 6447211492, 2759526793, 1676679984, 3655689037, 5300636312, 1463707815, 1483820045, 3371436430, 1256042280, 1273380037, 1867002514, 7524392184, 2113045567, 1300367447, 1746118392, 1270739603, 1871672550, 1574790192, 2643307453, 5126446888, 2130771712, 1465371653, 5490326028, 1873914867, 1463029193, 1712354525, 1794572275, 2823738074, 1586148707, 2619723465, 2409370432, 1497714725, 1910171127, 1997726860, 2324900557, 1846225514, 6522115298, 1736275134, 1548936613, 1294814247, 1797069487, 3213107764, 1802264644, 1839963312, 1732442457, 1672384324, 1912449555, 1278178992, 1929816272, 5356416594, 5172843865, 1664279327, 2350442141, 1656312435, 1845675654, 1827685703, 1252397723, 5616945199, 3675601605, 1734442735, 1881976852, 3828809034, 2387935353, 2029906001, 1197069394, 1269402871, 2064160160, 1270354642, 1705147594, 5398979743, 2049002927, 3962982466, 1192504311, 1863716232, 5626136031, 2281544503, 1885443940, 1894947983, 1785884091, 1413727783, 1342829361, 1362607654, 1829335871, 1662450871, 1976794091, 1245429172, 2088912225, 1013657184, 1752164320, 3478459251, 1749774442, 1722150384, 3053424305, 1692801804, 5607826030, 1877253217, 1827243543, 1665256992, 5786332015, 5619779382, 1195019732, 1689224772, 1617774075, 1666680885, 1117395942, 1707463070, 2014845112, 1910672761, 1192329374, 1952286741, 2745509764, 1792673805, 1171345731, 1721396755, 2044833997, 1648886722, 1737877151, 1501634660, 1500894097, 7166486922, 1826628633, 1576850535, 1288814951, 1692042771, 1750155477, 1664207987, 1231687250, 1336930134, 1656214784, 2732754935, 3609302441, 1375953203, 2161301493, 1660235667, 5586965954, 2845018135, 1716761743, 1240959311, 3005331561, 1764033053, 1769171570, 1743938470, 6115182009, 1465832951, 1702129627, 1927305954, 5543153302, 1922233745, 2794430491, 1761713265, 2356534223, 1752820413, 1255250097, 1926243773, 1740301135, 1689219395, 1762210562, 6529876887, 1728945512, 1278089051, 1224783537, 1730123695, 1212569831, 1110411735, 5874514144, 3500459811, 1216826653, 1721860370, 1256223644, 1505903624, 1787196155, 5143117209, 1195379710, 1704658972, 3708072513, 3181706612, 3178384564, 1265295777, 3176010690, 3108949955, 1197199510, 1749783560, 1734466633, 2021822051, 1801920002, 5656129896, 1224449043, 2629731043, 1739791150, 1646493427, 1738171957, 5680339910, 1757052517, 1418555123, 5112240060, 6393166009, 1257831543, 3116872295, 1640365687, 1749937787, 1217933782, 1728679790, 1630856882, 7527950457, 1345467925, 1659064660, 6190030326, 1654390540, 3210693695, 1623412013, 1217541774, 1322714793, 1835110811, 3528394330, 1413971423, 3664122147, 1965681503, 2807129234, 2956384255, 1337925752, 5886998602, 2882733894, 1721523337, 1766673785, 1225419417, 1866882821, 2057070033, 1132891981, 2191588464, 1822299354, 1736695537, 1760938994, 1225627080, 1313455195, 3309483405, 1825573943, 2003394681, 1309167357, 1901751947, 1928540007, 1692544657, 1835539930, 2700162334, 1219952281, 1192329893, 1730930214, 1264890570, 1770026453, 2044679991, 1252036043, 5643994130, 5659866424, 1198074851, 1751309223, 6463527162, 1526131963, 1814284757, 5680343342, 5127009132, 1228196907, 1930258915, 1732418574, 2382356540, 1045134617, 1345943410, 2251552653, 1191220232]


    # id_list
    for i in range(2):
        WeiboUserScrapy(user_id=id_list[i], filter=0, download_img=False,index=i)

        sleep(10)
